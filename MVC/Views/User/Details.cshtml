@model MVC.Models.User
@{
    ViewData["Title"] = "User Details";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">@Model.UserName</h3>
                    @if (User.IsInRole("Admin"))
                    {
                        <span class="badge bg-light text-dark">User ID: @Model.Id</span>
                    }
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="text-center py-4 bg-light rounded">
                                <i class="bi bi-person-circle" style="font-size: 5rem;"></i>
                            </div>
                        </div>
                        <div class="col-md-8">
                            <dl class="row gy-3">
                                <dt class="col-sm-3 text-nowrap">Username</dt>
                                <dd class="col-sm-10">@Model.UserName</dd>

                                <dt class="col-sm-3 text-nowrap">Email</dt>
                                <dd class="col-sm-10">@Model.Email</dd>

                                <dt class="col-sm-3 text-nowrap">Status</dt>
                                <dd class="col-sm-9">
                                    @if (Model.IsBanned)
                                    {
                                        <span class="badge bg-danger">Banned</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                </dd>

                                <dt class="col-sm-3 text-nowrap">Achievement</dt>
                                <dd class="col-sm-10" id="achievementBadge">
                                    <span class="badge bg-secondary">Loading...</span>
                                </dd>

                            </dl>
                        </div>
                    </div>

                    <div class="mt-4">
                        <h5 class="mb-3">Progress to next level</h5>
                        <div class="progress" style="height: 25px;">
                            <div id="achievementProgress"
                                class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar"
                                style="width: 0%"></div>
                        </div>
                        <div class="d-flex justify-content-between mt-2">
                            <small id="currentLevelText">Loading...</small>
                            <small id="nextLevelText">Loading...</small>
                        </div>
                    </div>
                </div>

                @if (User.IsInRole("Admin") && Model.UserName != User.Identity?.Name)
                {
                    <div class="card-footer bg-transparent border-0 py-3">
                        <div class="d-flex justify-content-end gap-2">
                            <a asp-controller="User" asp-action="DeleteUser" asp-route-userId="@Model.Id"
                                class="btn btn-danger btn-sm"
                                onclick="return confirm('Are you sure you want to delete this user?');">
                                <i class="bi bi-trash"></i> Delete
                            </a>

                            <form asp-controller="User" asp-action="Ban" asp-route-id="@Model.Id" method="post">
                                @if (Model.IsBanned)
                                {
                                    <button type="submit" class="btn btn-success btn-sm rounded-3 shadow-sm">
                                        <i class="bi bi-check-circle"></i> Unban
                                    </button>
                                }
                                else
                                {
                                    <button type="submit" class="btn btn-warning btn-sm rounded-3 shadow-sm">
                                        <i class="bi bi-slash-circle"></i> Ban
                                    </button>
                                }
                            </form>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const userId = '@Model.Id';

            const achievements = [
                { min: 1, max: 10, name: "Newbie", icon: "🎬", class: "bg-primary" },
                { min: 11, max: 25, name: "Viewer", icon: "🍿", class: "bg-success" },
                { min: 26, max: 50, name: "Cinephile", icon: "📺", class: "bg-info" },
                { min: 51, max: 100, name: "Movie Buff", icon: "🧠", class: "bg-warning text-dark" },
                { min: 101, max: 200, name: "Critic", icon: "🕶️", class: "bg-dark" },
                { min: 201, max: 500, name: "Expert", icon: "🌟", class: "bg-purple" },
                { min: 501, max: Infinity, name: "Legend", icon: "👑", class: "bg-gold" }
            ];

            fetch(`/User/CountSeenIt?userId=${userId}`)
                .then(response => {
                    if (!response.ok) throw new Error("Request failed");
                    return response.json();
                })
                .then(count => {
                    const achievement = achievements.find(a => count >= a.min && count <= a.max) ||
                        achievements[achievements.length - 1];

                    const badge = document.getElementById("achievementBadge");
                    badge.innerHTML = `
                            <span class="badge ${achievement.class}">
                                ${achievement.icon} ${achievement.name}
                            </span>
                            <small class="ms-2 text-muted">(${count} rated movies)</small>
                        `;

                    const currentLevel = achievements.indexOf(achievement);
                    const nextLevel = currentLevel < achievements.length - 1 ? currentLevel + 1 : currentLevel;
                    const progressPercentage = nextLevel > currentLevel ?
                        ((count - achievement.min) / (achievements[nextLevel].min - achievement.min)) * 100 : 100;

                    const progressBar = document.getElementById("achievementProgress");
                    progressBar.style.width = `${progressPercentage}%`;
                    progressBar.classList.add(achievement.class);

                    document.getElementById("currentLevelText").textContent =
                        `${achievement.icon} ${achievement.name} (${count}/${achievement.max})`;

                    if (nextLevel > currentLevel) {
                        document.getElementById("nextLevelText").textContent =
                            `${achievements[nextLevel].icon} ${achievements[nextLevel].name} (${achievements[nextLevel].min})`;
                    } else {
                        document.getElementById("nextLevelText").textContent = "Max level achieved!";
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    document.getElementById("achievementBadge").innerHTML =
                        '<span class="badge bg-secondary">Error loading achievement</span>';
                });
        });
    </script>

    <style>
        .bg-purple {
            background-color: #6f42c1;
        }

        .bg-gold {
            background-color: #ffc107;
            color: #000 !important;
        }

        .progress-bar {
            transition: width 1s ease-in-out;
        }
    </style>
}
